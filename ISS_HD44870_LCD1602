#include <Wire.h>
#include <LiquidCrystal.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include "secrets.h"

// LCD pin configuration
LiquidCrystal lcd(D4, D3, D2, D1, D0, D5);

// Wemos D1 LED pin
#define LED_PIN D8

// Constants
const float myLat = -33.9249;
const float myLon = 18.4241;
String apiKey = "NH74CL-F9XL2D-EU42SJ-5CZB";
String satID = "25544";  // ISS NORAD ID

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);

  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("ISS Tracker");

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void fetchISSData() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClientSecure client;
    client.setInsecure();

    HTTPClient http;
    String url = "https://api.n2yo.com/rest/v1/satellite/positions/" + satID + "/" + String(myLat) + "/" + String(myLon) + "/0/1/&apiKey=" + apiKey;

    http.begin(client, url);
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      String payload = http.getString();
      StaticJsonDocument<1024> doc;
      DeserializationError error = deserializeJson(doc, payload);

      if (!error) {
        float satLatitude = doc["positions"][0]["satlatitude"];
        float satLongitude = doc["positions"][0]["satlongitude"];
        float distance = calculateDistance(myLat, myLon, satLatitude, satLongitude);

        // Clear LCD before updating
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Lat: ");
        lcd.print(satLatitude, 2);

        lcd.setCursor(0, 1);
        lcd.print("Lon: ");
        lcd.print(satLongitude, 2);

        delay(2000); // Short delay to allow reading of position before refreshing
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Dist: ");
        lcd.print(distance, 1);
        lcd.setCursor(0, 1);
        lcd.print("km to ISS");

        // Control LED blink rate based on distance
        controlLEDBlink(distance);

      } else {
        Serial.println("JSON Parsing failed");
      }
    } else {
      Serial.print("Error on HTTP request: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  }
}

void controlLEDBlink(float distance) {
  int delayTime;

  if (distance < 200) {
    delayTime = 100; // Fast blink
  } else if (distance < 500) {
    delayTime = 300; // Medium blink
  } else if (distance < 1000) {
    delayTime = 600; // Slow blink
  } else {
    digitalWrite(LED_PIN, LOW); // LED off
    return;
  }

  digitalWrite(LED_PIN, HIGH);
  delay(delayTime);
  digitalWrite(LED_PIN, LOW);
  delay(delayTime);
}

float calculateDistance(float lat1, float lon1, float lat2, float lon2) {
  const float R = 6371.0; // Earth radius in km
  float dLat = radians(lat2 - lat1);
  float dLon = radians(lon2 - lon1);
  float a = sin(dLat / 2) * sin(dLat / 2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dLon / 2) * sin(dLon / 2);
  float c = 2 * atan2(sqrt(a), sqrt(1 - a));
  return R * c;
}

void loop() {
  fetchISSData();
  delay(10000);  // Fetch data every 10 seconds
}
